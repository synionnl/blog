openapi: 3.0.3

info:
  version: 0.0.1
  title: Contact center service
  description: |
servers:
  - url: http://localhost:9000/

paths:

  /api/questions:
    post:
      tags:
        - questions
      summary: Starts the answer question process
      description: |
        
      operationId: RegisterQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/register_question"
              
      responses:
        202:
          description: Accepted
    get:
      tags:
        - questions
      summary: Gets a list of answer question processes
      operationId: GetQuestions
      parameters:
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/questions"
          
  /api/questions/{question_id}:
    parameters:
      - $ref: "#/components/parameters/question_id"
    delete:
      tags:
        - questions
      summary: Ends the answer question process
      description: |
        
      operationId: StopAnsweringQuestion
      responses:
        202:
          description: Accepted
  
  /api/questions/answer_question_tasks/{task_id}:
    parameters:        
      - $ref: "#/components/parameters/task_id"
    get:
      tags:
        - answer question tasks
      summary: Gets an answer question task
      operationId: GetAnswerQuestionTask
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/answer_question_task"
        404:
          description: Task not found
    put:
      tags:
        - answer question tasks
      summary: Completes the answer question task
      operationId: CompleteAnswerQuestionTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/answer_question"
      responses:
        202:
          description: Accepted
        404:
          description: Task not found
          
  /api/questions/review_answer_tasks/{task_id}:
    parameters:        
      - $ref: "#/components/parameters/task_id"
    get:
      tags:
        - review answer tasks
      summary: Gets a review answer task
      operationId: GetReviewAnswerTask
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/review_answer_task"
        404:
          description: Task not found
    put:
      tags:
        - review answer tasks
      summary: Completes the review answer task
      operationId: CompleteReviewAnswerTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/accept_answer"
                - $ref: "#/components/schemas/reject_answer"
              discriminator:
                propertyName: command_type
      responses:
        202:
          description: Accepted
        404:
          description: Task not found
          
  /api/questions/modify_answer_tasks/{task_id}:
    parameters:        
      - $ref: "#/components/parameters/task_id"
    get:
      tags:
        - modify answer tasks
      summary: Gets a modify answer task
      operationId: GetModifyAnswerTask
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/modify_answer_task"
        404:
          description: Task not found
    put:
      tags:
        - modify answer tasks
      summary: Completes the modify answer task
      operationId: CompleteModifyAnswerTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/modify_answer"
      responses:
        202:
          description: Accepted
        404:
          description: Task not found
          
          

components:

  schemas:

    # COMMANDS
    
    register_question:
      type: object
      properties:
        question_id:
          $ref: "#/components/schemas/question_id"
        subject:
          $ref: "#/components/schemas/subject"
        question:
          $ref: "#/components/schemas/question"
        sender:
          $ref: "#/components/schemas/sender"
      required:
        - question_id
        - subject
        - question
        - sender
        
    answer_question:
      type: object
      properties:
        command_type:
          type: string
          enum:
            - answer_question
        answer:
          $ref: "#/components/schemas/answer"
      
    accept_answer:
      type: object
      properties:
        command_type:
          type: string
          enum:
            - accept_answer
      
    reject_answer:
      type: object
      properties:
        command_type:
          type: string
          enum:
            - reject_answer
        rejection:
          $ref: "#/components/schemas/rejection"
    
    modify_answer:
      type: object
      properties:
        command_type:
          type: string
          enum:
            - modify_answer
        answer:
          $ref: "#/components/schemas/answer"
          
    # RESPONSES:
    
    questions:
      type: array
      items:
        type: object
        properties:
          question_id:
            $ref: "#/components/schemas/question_id"
          recieved_on:
            $ref: "#/components/schemas/recieved_on"
          last_activity_on:
            $ref: "#/components/schemas/last_activity_on"
          subject:
            $ref: "#/components/schemas/subject"
          sender:
            $ref: "#/components/schemas/sender"
          status:
            type: string
            enum:
              - process_started
              - question_answered
              - answer_rejected
              - answer_accepted
              - answer_modified
              - answer_send
        required:
          - question_id
          - recieved_on
          - subject
          - sender
          - status
          
    # TASKS
    
    answer_question_task:
      type: object
      properties:
        question_id:
          $ref: "#/components/schemas/question_id"
        recieved_on:
          $ref: "#/components/schemas/recieved_on"
        subject:
          $ref: "#/components/schemas/subject"
        question:
          $ref: "#/components/schemas/question"
        sender:
          $ref: "#/components/schemas/sender"
      required:
        - question_id
        - recieved_on
        - subject
        - question
        - sender
        
    review_answer_task:
      type: object
      properties:
        question_id:
          $ref: "#/components/schemas/question_id"
        recieved_on:
          $ref: "#/components/schemas/recieved_on"
        subject:
          $ref: "#/components/schemas/subject"
        question:
          $ref: "#/components/schemas/question"
        sender:
          $ref: "#/components/schemas/sender"
        answer:
          $ref: "#/components/schemas/answer"
      required:
        - question_id
        - recieved_on
        - subject
        - question
        - sender
        - answer
        
    modify_answer_task:
      type: object
      properties:
        question_id:
          $ref: "#/components/schemas/question_id"
        recieved_on:
          $ref: "#/components/schemas/recieved_on"
        subject:
          $ref: "#/components/schemas/subject"
        question:
          $ref: "#/components/schemas/question"
        sender:
          $ref: "#/components/schemas/sender"
        answer:
          $ref: "#/components/schemas/answer"
        rejection:
          $ref: "#/components/schemas/rejection"
      required:
        - question_id
        - recieved_on
        - subject
        - question
        - sender
        - answer
        - rejection

    # MODELS
    
    # TYPES
    
    question_id:
      type: string
      format: uuid
      
    recieved_on:
      type: string
      format: date-time
      
    last_activity_on:
      type: string
      format: date-time
      
    subject:
      type: string
  
    question:
      type: string
      format: markdown
      
    sender:
      type: string
      format: email
  
    answer:
      type: string
      format: markdown
  
    rejection:
      type: string
      format: markdown
      
    task_id:
      type: integer
      format: int64
      
  parameters:

    question_id:
      in: path
      name: question_id
      required: true
      schema:
        $ref: "#/components/schemas/question_id"
        
    task_id:
      in: path
      name: task_id
      required: true
      schema:
        $ref: "#/components/schemas/task_id"

    offset:
      in: query
      name: offset
      schema:
        type: integer
        default: 0
      description: The number of items to skip before starting to collect the result set
    
    limit:
      in: query
      name: limit
      schema:
        type: integer
        default: 10
      description: The numbers of items to return